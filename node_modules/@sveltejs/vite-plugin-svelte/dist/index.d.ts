import { Plugin } from 'vite';
import { CompileOptions, Warning } from 'svelte/types/compiler/interfaces';
export { CompileOptions, Warning } from 'svelte/types/compiler/interfaces';
import { PreprocessorGroup } from 'svelte/types/compiler/preprocess';
export { MarkupPreprocessor, Preprocessor, PreprocessorGroup, Processed } from 'svelte/types/compiler/preprocess';

interface Options {
    /** path to svelte config file, either absolute or relative to vite root*/
    configFile?: string;
    /** One or more minimatch patterns */
    include?: Arrayable<string>;
    /** One or more minimatch patterns */
    exclude?: Arrayable<string>;
    /**
     * By default, all ".svelte" files are compiled
     * @default ['.svelte']
     */
    extensions?: string[];
    /**
     * Optionally, preprocess components with svelte.preprocess:
     * \@see https://svelte.dev/docs#svelte_preprocess
     */
    preprocess?: Arrayable<PreprocessorGroup>;
    /** Emit Svelte styles as virtual CSS files for other plugins to process.
     * @default true
     */
    emitCss?: boolean;
    /** Options passed to `svelte.compile` method. */
    compilerOptions: Partial<CompileOptions>;
    /**
     * custom warning handler for svelte compiler warnings
     */
    onwarn?: (warning: Warning, defaultHandler?: (warning: Warning) => void) => void;
    /**
     * enable/disable hmr. You want this enabled.
     *
     * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
     * DO NOT CUSTOMIZE SVELTE-HMR OPTIONS UNLESS YOU KNOW EXACTLY WHAT YOU ARE DOING
     *
     *                             YOU HAVE BEEN WARNED
     * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
     *
     * set to object to pass custom options to svelte-hmr, see https://github.com/rixo/svelte-hmr#options
     *
     * @default true for development, always false for production
     */
    hot?: boolean | {
        injectCss?: boolean;
        [key: string]: any;
    };
    /**
     * vite plugins can contribute additional preprocessors by defining api.sveltePreprocess.
     * If you don't want to use them, set this to true to ignore them all or use an array of strings with plugin names to specify which
     *
     * @default false
     */
    ignorePluginPreprocessors?: boolean | string[];
    /**
     * These options are considered experimental and breaking changes to them can occur in any release
     */
    experimental?: ExperimentalOptions;
}
/**
 * These options are considered experimental and breaking changes to them can occur in any release
 */
interface ExperimentalOptions {
    /**
     * use extra preprocessors that delegate style and typescript preproessing to native vite plugins
     *
     * do not use together with svelte-preprocess!
     *
     * @default false
     */
    useVitePreprocess?: boolean;
    /**
     * wrap all preprocessors in with a function that adds a sourcemap to the output if missing
     *
     * to use this option you have to install "diff-match-patch"
     */
    generateMissingPreprocessorSourcemaps?: boolean;
    /**
     * function to update compilerOptions before compilation
     *
     * data.filename is the file to be compiled,
     * data.code is the already preprocessed code
     * data.compileOptions are the compilerOptions that are going to be used
     *
     * to change one, you should return an object with the changes you need, eg:
     *
     * ```
     * ({filename,compileOptions}) => { if( compileWithHydratable(filename) && !compileOptions.hydratable ){ return {hydratable: true}}}
     * ```
     * @default undefined
     */
    dynamicCompileOptions?: (data: {
        filename: string;
        code: string;
        compileOptions: Partial<CompileOptions>;
    }) => Promise<Partial<CompileOptions> | void> | Partial<CompileOptions> | void;
}
declare type ModuleFormat = NonNullable<CompileOptions['format']>;
declare type CssHashGetter = NonNullable<CompileOptions['cssHash']>;
declare type Arrayable<T> = T | T[];

declare function svelte(inlineOptions?: Partial<Options>): Plugin;

export { Arrayable, CssHashGetter, ModuleFormat, Options, svelte };
